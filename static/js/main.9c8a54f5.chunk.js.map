{"version":3,"sources":["Components/Titles.js","Components/Form.js","Components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","id","React","Component","Form","onSubmit","this","props","getWeather","type","value","inputCity","onChange","changeCity","placeholder","inputCountry","changeCountry","Weather","iconUrl","icon","err","city","country","alt","src","temperature","humidity","description","KEY","App","state","event","setState","target","a","preventDefault","fetch","weatherCall","ok","Error","json","weatherInfo","main","temp","weather","name","sys","message","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.9c8a54f5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Titles extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"title\">\r\n                <h1>Weather App</h1>\r\n                <p>Get the latest weather news</p>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Titles;","import React from \"react\";\r\n\r\nclass Form extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"form-comp\">\r\n                <form onSubmit={this.props.getWeather}>\r\n                    <input type=\"text\" value={this.props.inputCity} onChange={this.props.changeCity} placeholder=\"City . . .\"/>\r\n                    <input type=\"text\" value={this.props.inputCountry} onChange={this.props.changeCountry} placeholder=\"Country . . .\"/>\r\n                    <button type=\"submit\">Get weather</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\n\r\nclass Weather extends React.Component {\r\n\r\n    render() {\r\n        let iconUrl = `http://openweathermap.org/img/wn/${this.props.icon}@2x.png`;\r\n        return (\r\n            <div id=\"weather-comp\">\r\n                {\r\n                this.props.err && <p>\r\n                   <span>{this.props.err}</span> \r\n                </p>\r\n                }\r\n                {\r\n                this.props.city && this.props.country && <p>Location: \r\n                    <span> {this.props.city}, {this.props.country}</span>\r\n                </p>\r\n                }\r\n                {\r\n                this.props.icon && <img alt='' id=\"icon\" src={iconUrl}/>\r\n                }\r\n                {\r\n                this.props.temperature && <p>Temperature: \r\n                    <span> {this.props.temperature} &#176;C</span>\r\n                </p>\r\n                }\r\n                {\r\n                this.props.humidity && <p>Humidity: \r\n                    <span> {this.props.humidity}%</span>\r\n                </p>\r\n                }\r\n                {\r\n                this.props.description && <p>Description: \r\n                    <span> {this.props.description}</span>\r\n                </p>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport './App.css'\r\nimport Titles from \"./Components/Titles\";\r\nimport Form from \"./Components/Form\";\r\nimport Weather from \"./Components/Weather\";\r\n\r\nconst KEY = '9c3b6aabb597a8046c5c63e3bfa95481';\r\n\r\nclass App extends React.Component {\r\n    \r\n    state = {\r\n            inputCity: \"\",\r\n            inputCountry: \"\",\r\n            temperature: \"\",\r\n            humidity: \"\",\r\n            description: \"\",\r\n            city: \"\",\r\n            country: \"\",\r\n            icon: \"\",\r\n            err: \"\"\r\n        };\r\n    \r\n\r\n    changeCity = (event) => {\r\n        this.setState({\r\n            inputCity: event.target.value\r\n        });\r\n    }\r\n\r\n    changeCountry = (event) => {\r\n        this.setState({\r\n            inputCountry: event.target.value\r\n        });\r\n    }\r\n\r\n    getWeather = async (event) => {\r\n        event.preventDefault();\r\n        let city = this.state.inputCity;\r\n        let country = this.state.inputCountry;\r\n        try {\r\n            let weatherCall = await fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${KEY}&units=metric`);\r\n            if (!weatherCall.ok) {\r\n                throw new Error('Please enter a valid location!');\r\n            } else {\r\n                let weatherInfo = await weatherCall.json();\r\n                this.setState({\r\n                    inputCity: \"\",\r\n                    inputCountry: \"\",\r\n                    temperature: weatherInfo.main.temp,\r\n                    humidity: weatherInfo.main.humidity,\r\n                    description: weatherInfo.weather[0].description,\r\n                    city: weatherInfo.name,\r\n                    country: weatherInfo.sys.country,\r\n                    icon: weatherInfo.weather[0].icon,\r\n                    err: \"\"\r\n        });\r\n            }\r\n        } catch (error) {\r\n            this.setState({\r\n                inputCity: \"\",\r\n                inputCountry: \"\",\r\n                temperature: \"\",\r\n                humidity: \"\",\r\n                description: \"\",\r\n                city: \"\",\r\n                country: \"\",\r\n                icon: \"\",\r\n                err: error.message\r\n            });\r\n        }\r\n        \r\n            \r\n\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id='app'>\r\n                <Titles />\r\n                <div id=\"form-weather\">\r\n                    <Form \r\n                    getWeather={this.getWeather} \r\n                    changeCity={this.changeCity} \r\n                    changeCountry={this.changeCountry} \r\n                    inputCity={this.state.inputCity}\r\n                    inputCountry={this.state.inputCountry}\r\n                />\r\n                    <Weather \r\n                    temperature={this.state.temperature}\r\n                    humidity={this.state.humidity}\r\n                    description={this.state.description}\r\n                    city={this.state.city}\r\n                    country={this.state.country}\r\n                    icon={this.state.icon}\r\n                    err={this.state.err}\r\n                />\r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}